version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id: 
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying Udapeople environment... << parameters.workflow_id>> "
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
          
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters: 
      workflow_id: 
        type: string  
    steps:
      - run:
          name: Revert migrations
          when: on_success
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            curl 
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
             # Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Front-end
          command: |
             cd frontend
             npm install
             npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-end
          command: |
             cd backend
             npm install
             npm run test            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - restore_cache:
          keys: [frontend-build]
      - run:
          name:  Scan the Frontend Dependencies
          command: |
             cd frontend
             npm install
             npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
     - checkout
     - restore_cache:
          keys: [Backedn-build]
     - run:
          name:  Scan  Backend Dependencies
          command: |
             cd backend
             npm install
             npm audit --audit-level=critical
      
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli 
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="udapeople" \
              --stack-name  "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="udapeople" \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
           name: Add back-end ip to ansible inventory
           command: |
              aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend--${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIPAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt   
      - destroy-environment:
        when: on_fail
        
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
     - checkout
      # Add ssh keys with fingerprint
     - add_ssh_keys:
         fingerprints: ["e6:9d:08:a5:be:0c:7a:99:ca:f5:d0:fd:b2:63:03:c7"]
       # attach workspace
     - attach_workspace: 
         at: ~/
     - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            
     - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt main.yaml --private-key=~/udapeople.pem
            
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
        when: on_fail

  run-migrations:
    docker:
      circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure      
      - destroy-environment:
        when: on_fail

  deploy-frontend:
    docker:
      amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
              cd frontend
              npm install
      - run:
          name: Get backend url
          command: |
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            npm run build
            cd /dist
            s3 copy 
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
       when: on_fail

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout:
      - ssh_fingerprints: ["e6:9d:08:a5:be:0c:7a:99:ca:f5:d0:fd:b2:63:03:c7"]
      - attach_workspace: 
         at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      - destroy-environment:
        when: on_fail

  smoke-test:
    docker:
      - image: alpine:latest
    
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            - run: apk add --update curl
      - run:
          name: Get backend url
          command: |
            URL=${API_URL}
      - run:
          name: Backend smoke test.
          command: |
            if curl -s --head ${URL} 
            then
               return 0
            else
               return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com"
            if curl -s ${URL} | grep "welcome"
            then
               return 0
            else
               return 1
            fi
       - destroy-environment:
         when: on_fail

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="${S3_BUCKET_NAME}" \ # Name of the S3 bucket you created manually.
            --tags project=udapeople &
      - destroy-environment:
        when: on_fail       
cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
             export OldWorkflowID=$(aws cloudformation \
             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
             --no-paginate --output text)
             export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
             --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID} --recursive"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]